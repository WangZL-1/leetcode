class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        
        fill(board,0,0);

   }
   bool fill(vector<vector<char>>& board, int x,int y){
        if(y==9)
            return true;

        int nx = (x + 1) % 9;
        int ny = (nx == 0) ? y + 1 : y;
        if (board[x][y] != '.') 
            return fill(board, nx, ny);
        
        // for(int i = 0; i < 9; i++)
        //     for(int j = 0; j < 9; j++) {
                const char c = board[x][y]; 
                if ( c == '.') {
                    for (int n=1;n<=9;n++){                       
                        if(isok(board,n,x,y)){
                            board[x][y]=n+'0';
                            
                            if(fill(board,nx,ny))
                                return true;
                            board[x][y]='.';
                        }
                    }
                   
                }
            // } 
        return false;

   }
   bool isok (vector<vector<char>>& board, int n,int x,int y){
       for(int i=0;i<9;i++){
            if(board[x][i]-'0'==n)
                return false;
            if(board[i][y]-'0'==n)
                return false;
       }
       int a=x/3,b=y/3;
       a=a*3;
       b=b*3;
       for(int i=a;i<3;i++){
           for(int j=b;j<3;j++)
                if(board[i][j]-'0'==n)
                    return false;
       }
       return true;

   }
};


// [["5","3","4","9","7","6","8","1","2"],
//  ["6","2","7","1","9","5","3","4","8"],
//  ["1","9","8","2","3","7","5","6","4"],
//  ["8","1","2","7","6","4","9","5","3"],
//  ["4","7","9","8","5","3","6","2","1"],
//  ["7","4","3","5","2","8","1","9","6"],
//  ["9","6","5","3","4","1","2","8","7"],
//  ["2","8","6","4","1","9","7","3","5"],
//  ["3","5","1","6","8","2","4","7","9"]]

