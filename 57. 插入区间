class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        if(intervals.length==0){
            intervals=new int[][]{newInterval};
         
            return intervals;   
        }
        List<int[]> res = new ArrayList<>();
        int added=0;
        for(int i=0;i<intervals.length;i++){
            if(intervals[i][0]>newInterval[0]&&added==0){
                res.add(newInterval);
                added++;
            }
            res.add(intervals[i]);
        }
        if(added==0)
            res.add(newInterval);
        for(int i=1;i<res.size();i++){
            if(res.get(i)[0]<res.get(i-1)[1]){
                System.out.println("1");
                if(res.get(i)[1]<=res.get(i-1)[1]){
                    System.out.println("2");
                    res.remove(i);
                    break;
                }
                else{
                    for(int j=i+1;j<res.size();j++){
                        if(res.get(j)[0]>res.get(i)[1]){
                            System.out.println("4");
                            res.get(i-1)[1]=res.get(i)[1];
                            res.remove(i);
                            break;
                        }
                        else{
                            if(res.get(i)[1]<res.get(j)[1]){
                                System.out.println("3");
                                res.get(i-1)[1]=res.get(j)[1];
                                res.remove(j);
                                break;
                            }
                            else {
                                res.get(i-1)[1]=res.get(j)[1];
                                res.remove(j--);
                            }
                        }
                    }
                }
            }
        }
        res.remove(newInterval);
        return res.toArray(new int[][]{});
          
    }
}



class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        int left = newInterval[0];
        int right = newInterval[1];
        boolean placed = false;
        List<int[]> ansList = new ArrayList<int[]>();
        for (int[] interval : intervals) {
            if (interval[0] > right) {
                // 在插入区间的右侧且无交集
                if (!placed) {
                    ansList.add(new int[]{left, right});
                    placed = true;                    
                }
                ansList.add(interval);
            } else if (interval[1] < left) {
                // 在插入区间的左侧且无交集
                ansList.add(interval);
            } else {
                // 与插入区间有交集，计算它们的并集
                left = Math.min(left, interval[0]);
                right = Math.max(right, interval[1]);
            }
        }
        if (!placed) {
            ansList.add(new int[]{left, right});
        }
        int[][] ans = new int[ansList.size()][2];
        for (int i = 0; i < ansList.size(); ++i) {
            ans[i] = ansList.get(i);
        }
        return ans;
    }
}

作者：LeetCode-Solution
链接：https://leetcode.cn/problems/insert-interval/solution/cha-ru-qu-jian-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
