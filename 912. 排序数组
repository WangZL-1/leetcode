class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }
    vector<int> merge(vector<int>& left, vector<int>& right){
        int i=0,j=0;
        vector<int> result;
        // if all left elements <right
        if(left[left.size()-1]<right[0]){
            result=left;
            for(int k=0;k<right.size();k++)
                result.push_back(right[k]);
            return result;
        }
        // if all right elements <left
        if(left[0]>right[right.size()-1]){
            result=right;
            for(int k=0;k<left.size();k++)
                result.push_back(left[k]);
            return result;
        }
        while(i<left.size()&&j<right.size()){
            if(left[i]<=right[j]){
                result.push_back(left[i]);
                i++;
            }
            else{
                result.push_back(right[j]);
                j++;
            }
        }
        if(i==left.size()){
            for(int k=j;k<right.size();k++)
                result.push_back(right[k]);
            return result;
        }
        else if (j==right.size()){
            for(int k=i;k<left.size();k++)
                result.push_back(left[k]);
            return result;
        }
        return result;
    }
    vector<int> mergeSort(vector<int>& nums,int left, int right){
        vector<int> result;
        if(left==right){
            result.push_back(nums[left]);
            return result;
        }
        int mid = (left +right)/2;
        vector<int> l=mergeSort(nums,left,mid);
        vector<int> r=mergeSort(nums,mid+1,right);
        result=merge(l,r);
        return result;
    }   
};
