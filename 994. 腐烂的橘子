class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int count1=0;
        queue<pair<int,int>> q;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1) 
                    count1++;
                else if(grid[i][j] == 2) 
                    q.push({i, j});
            }
        }
        int time=0;
        cout<<q.size();
        while(count1>0&&!q.empty()){
            time++;
            int size=q.size();
            for(int i=0;i<size;i++){
                auto [x,y]=q.front();
                q.pop();
                bfs(grid,x,y,count1,q);
            }
        }
        if(count1>0)
            return -1;
        else
            return time;

    }
    void bfs(vector<vector<int>>& grid,int i,int j,int &count1,queue<pair<int,int>>& q){
        // left
        if(j-1>=0){
            if(grid[i][j-1]==1){
                grid[i][j-1]=2;
                count1--;
                q.push({i, j-1});
            }    
        }
        // top
        if(i-1>=0){
            if(grid[i-1][j]==1){
                grid[i-1][j]=2;
                count1--;
                q.push({i-1, j});
            }    
        }
        // bottow
        if(i+1<grid.size()){
            if(grid[i+1][j]==1){
                grid[i+1][j]=2;
                count1--;
                q.push({i+1, j});  
            }    
        }
        // right
        if(j+1<grid[0].size()){
            if(grid[i][j+1]==1){
                grid[i][j+1]=2;
                count1--;
                q.push({i, j+1});
                
            }    
        }
    }
};
